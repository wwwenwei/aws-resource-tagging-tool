{
  "ec2": {
    "resource_types": [
      {
        "type": "instance",
        "list_method": "describe_instances",
        "arn_template": "arn:aws:ec2:{region}:{account_id}:instance/{id}",
        "extract_ids": "lambda data: [i[\"InstanceId\"] for r in data.get(\"Reservations\", []) for i in r.get(\"Instances\", [])]"
      },
      {
        "type": "volume",
        "list_method": "describe_volumes",
        "arn_template": "arn:aws:ec2:{region}:{account_id}:volume/{id}",
        "extract_ids": "lambda data: [v[\"VolumeId\"] for v in data.get(\"Volumes\", [])]"
      },
      {
        "type": "security-group",
        "list_method": "describe_security_groups",
        "arn_template": "arn:aws:ec2:{region}:{account_id}:security-group/{id}",
        "extract_ids": "lambda data: [sg[\"GroupId\"] for sg in data.get(\"SecurityGroups\", [])]"
      },
      {
        "type": "subnet",
        "list_method": "describe_subnets",
        "arn_template": "arn:aws:ec2:{region}:{account_id}:subnet/{id}",
        "extract_ids": "lambda data: [s[\"SubnetId\"] for s in data.get(\"Subnets\", [])]"
      },
      {
        "type": "vpc",
        "list_method": "describe_vpcs",
        "arn_template": "arn:aws:ec2:{region}:{account_id}:vpc/{id}",
        "extract_ids": "lambda data: [v[\"VpcId\"] for v in data.get(\"Vpcs\", [])]"
      }
    ]
  },
  "s3": {
    "resource_types": [
      {
        "type": "bucket",
        "list_method": "list_buckets",
        "arn_template": "arn:aws:s3:::{id}",
        "extract_ids": "lambda data: [b[\"Name\"] for b in data.get(\"Buckets\", [])]"
      }
    ]
  },
  "lambda": {
    "resource_types": [
      {
        "type": "function",
        "list_method": "list_functions",
        "arn_template": "arn:aws:lambda:{region}:{account_id}:function:{id}",
        "extract_ids": "lambda data: [f[\"FunctionName\"] for f in data.get(\"Functions\", [])]"
      }
    ]
  },
  "rds": {
    "resource_types": [
      {
        "type": "db",
        "list_method": "describe_db_instances",
        "arn_template": "arn:aws:rds:{region}:{account_id}:db:{id}",
        "extract_ids": "lambda data: [db[\"DBInstanceIdentifier\"] for db in data.get(\"DBInstances\", [])]"
      }
    ]
  },
  "dynamodb": {
    "resource_types": [
      {
        "type": "table",
        "list_method": "list_tables",
        "arn_template": "arn:aws:dynamodb:{region}:{account_id}:table/{id}",
        "extract_ids": "lambda data: data.get(\"TableNames\", [])"
      }
    ]
  },
  "elasticache": {
    "resource_types": [
      {
        "type": "cluster",
        "list_method": "describe_cache_clusters",
        "arn_template": "arn:aws:elasticache:{region}:{account_id}:cluster:{id}",
        "extract_ids": "lambda data: [c[\"CacheClusterId\"] for c in data.get(\"CacheClusters\", [])]"
      }
    ]
  },
  "elb": {
    "resource_types": [
      {
        "type": "loadbalancer",
        "list_method": "describe_load_balancers",
        "arn_template": "arn:aws:elasticloadbalancing:{region}:{account_id}:loadbalancer/{id}",
        "extract_ids": "lambda data: [lb[\"LoadBalancerName\"] for lb in data.get(\"LoadBalancerDescriptions\", [])]"
      }
    ]
  },
  "elbv2": {
    "resource_types": [
      {
        "type": "loadbalancer",
        "list_method": "describe_load_balancers",
        "arn_template": null,
        "extract_ids": "lambda data: [lb[\"LoadBalancerArn\"] for lb in data.get(\"LoadBalancers\", [])]"
      }
    ]
  },
  "apigateway": {
    "resource_types": [
      {
        "type": "restapi",
        "list_method": "get_rest_apis",
        "arn_template": "arn:aws:apigateway:{region}::/restapis/{id}",
        "extract_ids": "lambda data: [api[\"id\"] for api in data.get(\"items\", [])]"
      }
    ]
  },
  "cloudformation": {
    "resource_types": [
      {
        "type": "stack",
        "list_method": "list_stacks",
        "arn_template": "arn:aws:cloudformation:{region}:{account_id}:stack/{id}",
        "extract_ids": "lambda data: [stack[\"StackId\"].split(\"/\")[-1] for stack in data.get(\"StackSummaries\", [])]"
      }
    ]
  },
  "cloudfront": {
    "resource_types": [
      {
        "type": "distribution",
        "list_method": "list_distributions",
        "arn_template": "arn:aws:cloudfront::{account_id}:distribution/{id}",
        "extract_ids": "lambda data: [dist[\"Id\"] for dist in data.get(\"DistributionList\", {}).get(\"Items\", [])]"
      }
    ]
  },
  "cloudwatch": {
    "resource_types": [
      {
        "type": "alarm",
        "list_method": "describe_alarms",
        "arn_template": "arn:aws:cloudwatch:{region}:{account_id}:alarm:{id}",
        "extract_ids": "lambda data: [alarm[\"AlarmName\"] for alarm in data.get(\"MetricAlarms\", [])]"
      }
    ]
  },
  "codebuild": {
    "resource_types": [
      {
        "type": "project",
        "list_method": "list_projects",
        "arn_template": "arn:aws:codebuild:{region}:{account_id}:project/{id}",
        "extract_ids": "lambda data: data.get(\"projects\", [])"
      }
    ]
  },
  "codecommit": {
    "resource_types": [
      {
        "type": "repository",
        "list_method": "list_repositories",
        "arn_template": "arn:aws:codecommit:{region}:{account_id}:repository/{id}",
        "extract_ids": "lambda data: [repo[\"repositoryName\"] for repo in data.get(\"repositories\", [])]"
      }
    ]
  },
  "codedeploy": {
    "resource_types": [
      {
        "type": "application",
        "list_method": "list_applications",
        "arn_template": "arn:aws:codedeploy:{region}:{account_id}:application:{id}",
        "extract_ids": "lambda data: data.get(\"applications\", [])"
      }
    ]
  },
  "codepipeline": {
    "resource_types": [
      {
        "type": "pipeline",
        "list_method": "list_pipelines",
        "arn_template": "arn:aws:codepipeline:{region}:{account_id}:pipeline/{id}",
        "extract_ids": "lambda data: [p[\"name\"] for p in data.get(\"pipelines\", [])]"
      }
    ]
  },
  "cognito-identity": {
    "resource_types": [
      {
        "type": "identitypool",
        "list_method": "list_identity_pools",
        "arn_template": "arn:aws:cognito-identity:{region}:{account_id}:identitypool/{id}",
        "extract_ids": "lambda data: [pool[\"IdentityPoolId\"] for pool in data.get(\"IdentityPools\", [])]"
      }
    ]
  },
  "cognito-idp": {
    "resource_types": [
      {
        "type": "userpool",
        "list_method": "list_user_pools",
        "arn_template": "arn:aws:cognito-idp:{region}:{account_id}:userpool/{id}",
        "extract_ids": "lambda data: [pool[\"Id\"] for pool in data.get(\"UserPools\", [])]"
      }
    ]
  },
  "dms": {
    "resource_types": [
      {
        "type": "replication-instance",
        "list_method": "describe_replication_instances",
        "arn_template": "arn:aws:dms:{region}:{account_id}:rep:{id}",
        "extract_ids": "lambda data: [inst[\"ReplicationInstanceIdentifier\"] for inst in data.get(\"ReplicationInstances\", [])]"
      }
    ]
  },
  "docdb": {
    "resource_types": [
      {
        "type": "db-cluster",
        "list_method": "describe_db_clusters",
        "arn_template": "arn:aws:rds:{region}:{account_id}:cluster:{id}",
        "extract_ids": "lambda data: [cluster[\"DBClusterIdentifier\"] for cluster in data.get(\"DBClusters\", [])]"
      }
    ]
  },
  "ecr": {
    "resource_types": [
      {
        "type": "repository",
        "list_method": "describe_repositories",
        "arn_template": "arn:aws:ecr:{region}:{account_id}:repository/{id}",
        "extract_ids": "lambda data: [repo[\"repositoryName\"] for repo in data.get(\"repositories\", [])]"
      }
    ]
  },
  "ecs": {
    "resource_types": [
      {
        "type": "cluster",
        "list_method": "list_clusters",
        "arn_template": null,
        "extract_ids": "lambda data: data.get(\"clusterArns\", [])"
      }
    ]
  },
  "eks": {
    "resource_types": [
      {
        "type": "cluster",
        "list_method": "list_clusters",
        "arn_template": "arn:aws:eks:{region}:{account_id}:cluster/{id}",
        "extract_ids": "lambda data: data.get(\"clusters\", [])"
      }
    ]
  },
  "emr": {
    "resource_types": [
      {
        "type": "cluster",
        "list_method": "list_clusters",
        "arn_template": "arn:aws:elasticmapreduce:{region}:{account_id}:cluster/{id}",
        "extract_ids": "lambda data: [c[\"Id\"] for c in data.get(\"Clusters\", [])]"
      }
    ]
  },
  "es": {
    "resource_types": [
      {
        "type": "domain",
        "list_method": "list_domain_names",
        "arn_template": "arn:aws:es:{region}:{account_id}:domain/{id}",
        "extract_ids": "lambda data: [domain[\"DomainName\"] for domain in data.get(\"DomainNames\", [])]"
      }
    ]
  },
  "events": {
    "resource_types": [
      {
        "type": "rule",
        "list_method": "list_rules",
        "arn_template": "arn:aws:events:{region}:{account_id}:rule/{id}",
        "extract_ids": "lambda data: [rule[\"Name\"] for rule in data.get(\"Rules\", [])]"
      }
    ]
  },
  "firehose": {
    "resource_types": [
      {
        "type": "deliverystream",
        "list_method": "list_delivery_streams",
        "arn_template": "arn:aws:firehose:{region}:{account_id}:deliverystream/{id}",
        "extract_ids": "lambda data: data.get(\"DeliveryStreamNames\", [])"
      }
    ]
  },
  "glacier": {
    "resource_types": [
      {
        "type": "vault",
        "list_method": "list_vaults",
        "arn_template": "arn:aws:glacier:{region}:{account_id}:vaults/{id}",
        "extract_ids": "lambda data: [vault[\"VaultName\"] for vault in data.get(\"VaultList\", [])]"
      }
    ]
  },
  "glue": {
    "resource_types": [
      {
        "type": "database",
        "list_method": "get_databases",
        "arn_template": "arn:aws:glue:{region}:{account_id}:database/{id}",
        "extract_ids": "lambda data: [db[\"Name\"] for db in data.get(\"DatabaseList\", [])]"
      }
    ]
  },
  "iam": {
    "resource_types": [
      {
        "type": "role",
        "list_method": "list_roles",
        "arn_template": "arn:aws:iam::{account_id}:role/{id}",
        "extract_ids": "lambda data: [role[\"RoleName\"] for role in data.get(\"Roles\", [])]"
      }
    ]
  },
  "kinesis": {
    "resource_types": [
      {
        "type": "stream",
        "list_method": "list_streams",
        "arn_template": "arn:aws:kinesis:{region}:{account_id}:stream/{id}",
        "extract_ids": "lambda data: data.get(\"StreamNames\", [])"
      }
    ]
  },
  "kms": {
    "resource_types": [
      {
        "type": "key",
        "list_method": "list_keys",
        "arn_template": null,
        "extract_ids": "lambda data: [key[\"KeyArn\"] for key in data.get(\"Keys\", [])]"
      }
    ]
  },
  "logs": {
    "resource_types": [
      {
        "type": "log-group",
        "list_method": "describe_log_groups",
        "arn_template": "arn:aws:logs:{region}:{account_id}:log-group:{id}",
        "extract_ids": "lambda data: [group[\"logGroupName\"] for group in data.get(\"logGroups\", [])]"
      }
    ]
  },
  "neptune": {
    "resource_types": [
      {
        "type": "db-cluster",
        "list_method": "describe_db_clusters",
        "arn_template": "arn:aws:rds:{region}:{account_id}:cluster:{id}",
        "extract_ids": "lambda data: [cluster[\"DBClusterIdentifier\"] for cluster in data.get(\"DBClusters\", []) if cluster.get(\"Engine\") == \"neptune\"]"
      }
    ]
  },
  "redshift": {
    "resource_types": [
      {
        "type": "cluster",
        "list_method": "describe_clusters",
        "arn_template": "arn:aws:redshift:{region}:{account_id}:cluster:{id}",
        "extract_ids": "lambda data: [cluster[\"ClusterIdentifier\"] for cluster in data.get(\"Clusters\", [])]"
      }
    ]
  },
  "route53": {
    "resource_types": [
      {
        "type": "hostedzone",
        "list_method": "list_hosted_zones",
        "arn_template": "arn:aws:route53::{account_id}:hostedzone/{id}",
        "extract_ids": "lambda data: [zone[\"Id\"].split(\"/\")[-1] for zone in data.get(\"HostedZones\", [])]"
      }
    ]
  },
  "sagemaker": {
    "resource_types": [
      {
        "type": "notebook-instance",
        "list_method": "list_notebook_instances",
        "arn_template": "arn:aws:sagemaker:{region}:{account_id}:notebook-instance/{id}",
        "extract_ids": "lambda data: [nb[\"NotebookInstanceName\"] for nb in data.get(\"NotebookInstances\", [])]"
      }
    ]
  },
  "secretsmanager": {
    "resource_types": [
      {
        "type": "secret",
        "list_method": "list_secrets",
        "arn_template": null,
        "extract_ids": "lambda data: [secret[\"ARN\"] for secret in data.get(\"SecretList\", [])]"
      }
    ]
  },
  "ses": {
    "resource_types": [
      {
        "type": "identity",
        "list_method": "list_identities",
        "arn_template": "arn:aws:ses:{region}:{account_id}:identity/{id}",
        "extract_ids": "lambda data: data.get(\"Identities\", [])"
      }
    ]
  },
  "sns": {
    "resource_types": [
      {
        "type": "topic",
        "list_method": "list_topics",
        "arn_template": null,
        "extract_ids": "lambda data: [topic[\"TopicArn\"] for topic in data.get(\"Topics\", [])]"
      }
    ]
  },
  "sqs": {
    "resource_types": [
      {
        "type": "queue",
        "list_method": "list_queues",
        "arn_template": null,
        "extract_ids": "lambda data: [url.split(\"/\")[-1] for url in data.get(\"QueueUrls\", [])]"
      }
    ]
  },
  "ssm": {
    "resource_types": [
      {
        "type": "parameter",
        "list_method": "describe_parameters",
        "arn_template": "arn:aws:ssm:{region}:{account_id}:parameter/{id}",
        "extract_ids": "lambda data: [param[\"Name\"] for param in data.get(\"Parameters\", [])]"
      }
    ]
  },
  "stepfunctions": {
    "resource_types": [
      {
        "type": "statemachine",
        "list_method": "list_state_machines",
        "arn_template": null,
        "extract_ids": "lambda data: [sm[\"stateMachineArn\"] for sm in data.get(\"stateMachines\", [])]"
      }
    ]
  }
}